<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>srm-翻译</title>
      <link href="/2018/08/30/srm-translation/"/>
      <url>/2018/08/30/srm-translation/</url>
      <content type="html"><![CDATA[<h1 id="srm-716-div2-T3-JumpDistancesOnTreeEasy"><a href="#srm-716-div2-T3-JumpDistancesOnTreeEasy" class="headerlink" title="srm-716-div2-T3-JumpDistancesOnTreeEasy"></a>srm-716-div2-T3-JumpDistancesOnTreeEasy</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一棵树,再给你一个数字集合S[]，元素唯一<br>问你从0开始走，每次选择下一个点以最短路走过去，并记录距离，问你是否存在一个距离序列使得这个序列去重之后恰好为数字集合<br>$1&lt;=总点数&lt;=51, S[i] &lt; S[i+1]$</p></blockquote><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><pre><code>{0,1,1,0,4,4} //p[i]与i+1之间连边{2,4}Returns: &quot;Possible&quot;     0    /   \  1     4 / \   / \2  3  5   6一条可能的路径是0, 2, 3, 6, 5. 产生的距离数组为 {2, 2, 4, 2} 去重后S = {2, 4}.{0,1,1,0,4,4}{1,2,3,4,5}Returns: &quot;Impossible&quot;{0}{1}Returns: &quot;Possible&quot;</code></pre><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><h1 id="srm-716-div1-T1-ConstructLCS"><a href="#srm-716-div1-T1-ConstructLCS" class="headerlink" title="srm-716-div1-T1-ConstructLCS"></a>srm-716-div1-T1-ConstructLCS</h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><blockquote><p>同下，去除条件中的ab&lt;=bc&lt;=ca<br>$ 1&lt;= ab,bc,ca&lt;=50$</p></blockquote><h1 id="srm-716-div2-T2-ConstructLCSEasy"><a href="#srm-716-div2-T2-ConstructLCSEasy" class="headerlink" title="srm-716-div2-T2-ConstructLCSEasy"></a>srm-716-div2-T2-ConstructLCSEasy</h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><blockquote><p>一个字符串的子序列可以通过删除这个字符串的若干个字符得到,两个字符串的最长公共子序列是这两个字符串所有的公共子序列中最长的一个，比如lcs(“101”,”111000”)=2,f(“101”,”11011”)=3,f(“00”,”1111”)=0,给你三个正整数,ab,bc,ca,请找出三个字符串A,B,C满足以下条件</p><ul><li>每一个字符串只包含0或者1</li><li>每个字符串的长度是1到1000</li><li>lcs(A, B) = ab, lcs(B, C) = bc, lcs(C, A) = ca<br>输出一个字符串A + “ “ + B + “ “ + C(即用空格拼接三个字符串)<br>$1 &lt;= ab &lt;= bc &lt;= ca &lt;= 50$</li></ul></blockquote><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h2><pre><code>234Returns: &quot;1111 101 1010101&quot;447Returns: &quot;10101010 1011 1010101&quot;678Returns: &quot;10101010 1111010 110101010&quot;</code></pre><h1 id="srm-717-div1-T1-ScoresSequence"><a href="#srm-717-div1-T1-ScoresSequence" class="headerlink" title="srm-717-div1-T1-ScoresSequence"></a>srm-717-div1-T1-ScoresSequence</h1><h2 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h2><blockquote><p>告诉你一副图中每个点的度,求有多少对(u,v)，u可以直接或者间接到达v，包括u=v的情况<br>数据保证答案是唯一的<br>不会有自环，不会同时存在a-&gt;b b-&gt;a<br>$1&lt;=n&lt;=100$</p></blockquote><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h2><pre><code>{2, 0, 1}Returns: 6构造方法为：A-&gt;B A-&gt;C C-&gt;B{1, 0, 2}Returns: 6{1, 1, 1}Returns: 9{0, 2, 8, 4, 3, 9, 1, 5, 7, 6}Returns: 55{22,20,14,13,17,15,12,18,23,15,21,26,33,5,19,9,37,0,25,28,4,12,35,32,25,7,31,6,2,29,10,33,36,27,39,28,40,3,8,38,3}Returns: 1422</code></pre><h1 id="srm-717-div2-T3-DerangementsDiv2"><a href="#srm-717-div2-T3-DerangementsDiv2" class="headerlink" title="srm-717-div2-T3-DerangementsDiv2"></a>srm-717-div2-T3-DerangementsDiv2</h1><h2 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你两个整数n,m,求{1,2,3,..,n+m}的排列中，前m个数是错排的方案数%(10^9+7)<br>$1&lt;=m&lt;=50,0&lt;=n&lt;=50$</p></blockquote><h2 id="样例-3"><a href="#样例-3" class="headerlink" title="样例"></a>样例</h2><pre><code>21Returns: 435Returns: 21234</code></pre><h1 id="srm-717-div2-T2-LexmaxReplace"><a href="#srm-717-div2-T2-LexmaxReplace" class="headerlink" title="srm-717-div2-T2-LexmaxReplace"></a>srm-717-div2-T2-LexmaxReplace</h1><h2 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你两个字符串s1,s2，每次你可以选择s2中的一个字符去替换s1中的某个字符，替换之后在s2中删除这个字符，求替换后字典序最大的字符串</p></blockquote><h2 id="样例-4"><a href="#样例-4" class="headerlink" title="样例"></a>样例</h2><pre><code>&quot;abb&quot;&quot;c&quot;Returns: &quot;cbb&quot;&quot;z&quot;&quot;f&quot;Returns: &quot;z&quot;&quot;fedcba&quot;&quot;ee&quot;Returns: &quot;feeeba&quot;</code></pre><h1 id="srm-718-div2-T2-InterleavingParenthesisDiv2"><a href="#srm-718-div2-T2-InterleavingParenthesisDiv2" class="headerlink" title="srm-718-div2-T2-InterleavingParenthesisDiv2"></a>srm-718-div2-T2-InterleavingParenthesisDiv2</h1><h2 id="题意-7"><a href="#题意-7" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你两个括号序列，不保证合法，求有多少种不同的方法可以将两个括号序列合并成一个合法的括号序列<br>合并的时候不能改变各自序列原先的顺序<br>序列长度都&lt;=50</p></blockquote><h2 id="样例-5"><a href="#样例-5" class="headerlink" title="样例"></a>样例</h2><pre><code>&quot;(()&quot;&quot;())&quot;Returns: 19</code></pre><p><img src="/img/srm_718_div2_T2.png" alt="srm-718-div2-T2"></p><pre><code>&quot;()()()()()()()()()()()()()()()&quot;&quot;()()()()()()()()&quot;Returns: 493841617&quot;()(()&quot;&quot;))((())&quot;Returns: 10&quot;(((((&quot;&quot;)))))&quot;Returns: 42&quot;)&quot;&quot;(&quot;Returns: 1</code></pre><h1 id="srm-718-div1-T1-InterleavingParenthesis"><a href="#srm-718-div1-T1-InterleavingParenthesis" class="headerlink" title="srm-718-div1-T1-InterleavingParenthesis"></a>srm-718-div1-T1-InterleavingParenthesis</h1><p>同上，范围改为2500 </p><h1 id="srm-718-div2-T3-ChainCity"><a href="#srm-718-div2-T3-ChainCity" class="headerlink" title="srm-718-div2-T3-ChainCity"></a>srm-718-div2-T3-ChainCity</h1><h2 id="题意-8"><a href="#题意-8" class="headerlink" title="题意"></a>题意</h2><blockquote><p>在一条直线上有若干个建筑物，告诉你相邻两个建筑物之间的距离dist[]<br>现在你可以建设k个任意门，任意门可以建造在直线上任意一个浮点位置<br>任意门之间可以瞬间移动<br>你的任务是求所有建筑物之间最大距离的最小值<br>dist的大小为[2,2000]，相邻两个建筑物之间的距离最大为10^6<br>任意门的个数为[2, size(dist) + 1]</p></blockquote><h2 id="样例-6"><a href="#样例-6" class="headerlink" title="样例"></a>样例</h2><pre><code>{3,5,4}2Returns: 4</code></pre><p><img src="/img/srm_718_div2_T3.png" alt="srm-718-div2-T3"></p><p>如上图片所示，d(A,B) = 3, d(A,C) = 4, d(A,D) = 4, d(B,C) = 3, d(B,D) = 3, and d(C,D) = 4.<br>所以最大距离为4</p><pre><code>{3,5,4}3Returns: 3{3,5,4}4Returns: 0{3,1,4,1,5,9,2,6,5,3,5} 4Returns: 8{    1000000,1000000,1000000,1000000,1000000,        1000000,1000000,1000000,1000000,1000000,        1000000,1000000,1000000,1000000,1000000,        1000000,1000000,1000000,1000000,1000000,        1000000,1000000,1000000,1000000,1000000,        1000000,1000000,1000000,1000000,1000000,        1000000,1000000,1000000,1000000,1000000}6Returns: 5000000</code></pre><h1 id="srm-719-div1-T1-LongMansionDiv1"><a href="#srm-719-div1-T1-LongMansionDiv1" class="headerlink" title="srm-719-div1-T1-LongMansionDiv1"></a>srm-719-div1-T1-LongMansionDiv1</h1><h2 id="题意-9"><a href="#题意-9" class="headerlink" title="题意"></a>题意</h2><blockquote><p>有一个nxm的数字迷宫，问你从起点走到终点经过的数字和的最小值<br>每一次可以走上下左右相邻的任意一个格子<br>每一行的数字都是相同的,给你一个a[],a[i]表示第i行的数字是什么<br>$1&lt;=n&lt;=50, 1&lt;=m&lt;=10^9, 1&lt;=a[i]&lt;=1000$<br>sx,sy ex,sy分别表示起点与终点<br>$0&lt;=sx,ex&lt;=N-1, 0&lt;=sy,ey&lt;=10^9$</p></blockquote><h2 id="样例-7"><a href="#样例-7" class="headerlink" title="样例"></a>样例</h2><pre><code>{5, 3, 10}2022Returns: 29(2,0)是起点 (2,2)是终点{5, 3, 10}0200Returns: 15{137, 200, 184, 243, 252, 113, 162}0242Returns: 1016{995, 996, 1000, 997, 999, 1000, 997, 996, 1000, 996, 1000, 997, 999, 996, 1000, 998, 999, 995, 995, 998, 995, 998, 995, 997, 998, 996, 998, 996, 997, 1000, 998, 997, 995, 1000, 996, 997, 1000, 997, 997, 999, 998, 995, 999, 999, 1000, 1000, 998, 997, 995, 999}1843315652128138238863Returns: 293443080673</code></pre><h1 id="srm-719-div2-T3-TwoDogsOnATree"><a href="#srm-719-div2-T3-TwoDogsOnATree" class="headerlink" title="srm-719-div2-T3-TwoDogsOnATree"></a>srm-719-div2-T3-TwoDogsOnATree</h1><h2 id="题意-10"><a href="#题意-10" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一棵树,每条边有边权,alice先选择树上的一条路径,计算路径上的边权的xor值A，然后将路径上的边都删除，树会变成若干个联通块，bob会选择其中一个联通块中的一条路径，计算边权的xor值B，求A xor B的最大值<br>$1&lt;=n&lt;=1000, 0&lt;=边权&lt;=1023$</p></blockquote><h2 id="样例-8"><a href="#样例-8" class="headerlink" title="样例"></a>样例</h2><pre><code>{0, 0, 0, 0} //p[]: p[i] 与i+1之间有一条w[i]的边{1, 2, 4, 8} //w[i]Returns: 15alice选择1-0-2  bob选择3-0-4</code></pre><h1 id="srm-719-div2-T2-LongMansionDiv2"><a href="#srm-719-div2-T2-LongMansionDiv2" class="headerlink" title="srm-719-div2-T2-LongMansionDiv2"></a>srm-719-div2-T2-LongMansionDiv2</h1><h2 id="题意-11"><a href="#题意-11" class="headerlink" title="题意"></a>题意</h2><blockquote><p>有一个nxm的数字迷宫，问你从左上角走到右下角经过的数字和的最小值<br>每一次可以走上下左右相邻的任意一个格子<br>每一行的数字都是相同的,给你一个a[],a[i]表示第i行的数字是什么<br>$1&lt;=n&lt;=50, 1&lt;=m&lt;=10^9, 1&lt;=a[i]&lt;=1000$</p></blockquote><h2 id="样例-9"><a href="#样例-9" class="headerlink" title="样例"></a>样例</h2><pre><code>3{1, 2, 1}Returns: 6矩阵为:1 1 12 2 21 1 14{3, 2, 4, 2}Returns: 175{3, 2, 5, 4, 2, 8}Returns: 32</code></pre><h1 id="srm-720-div1-T1-SumProduct"><a href="#srm-720-div1-T1-SumProduct" class="headerlink" title="srm-720-div1-T1-SumProduct"></a>srm-720-div1-T1-SumProduct</h1><h2 id="题意-12"><a href="#题意-12" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你0-9每种数字的出现次数<br>你需要从中选取一些数字构成A<br>选出另一些数字构成B<br>A的数位为X位，B的数位为Y位,可以有前导0<br>求所有可能的A×B的和</p></blockquote><h2 id="样例-10"><a href="#样例-10" class="headerlink" title="样例"></a>样例</h2><pre><code>{0,2,1,1,0,0,0,0,0,0}表示0-9每种数字的出现次数22Returns: 4114(A,B)可能的选择为(11, 23), (11, 32), (12, 13), (12, 31), (13, 12), (13, 21), (21, 13), (21, 31), (31, 12), (31, 21), (23, 11), (32, 11).{1,6,0,0,0,0,0,0,0,0}12Returns: 22</code></pre><h1 id="srm-720-div2-T3-RainbowGraph"><a href="#srm-720-div2-T3-RainbowGraph" class="headerlink" title="srm-720-div2-T3-RainbowGraph"></a>srm-720-div2-T3-RainbowGraph</h1><h2 id="题意-13"><a href="#题意-13" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一副无向图n个点,每个点有一种颜色<br>你想要走遍图中的每一个点恰好一次<br>同一种颜色的点一定要连着走，也就是走完一种颜色再去走另一种颜色<br>请问有多少种不同的走法<br>$2&lt;=n&lt;=100$<br>每个点的颜色为0-9，每种颜色出现不会超过10次<br>边数最多有2500条</p></blockquote><h2 id="样例-11"><a href="#样例-11" class="headerlink" title="样例"></a>样例</h2><pre><code>{0,0,0,1,1,1,2,2,2} 每个点的颜色{0,1,2,3,4,5,6,7,8,0,4,8} a[]{1,2,0,4,5,3,7,8,6,3,7,2} b[]a[i]-b[i]是一条无向边Returns: 24</code></pre><h1 id="srm-720-div2-T2-MinProduct"><a href="#srm-720-div2-T2-MinProduct" class="headerlink" title="srm-720-div2-T2-MinProduct"></a>srm-720-div2-T2-MinProduct</h1><h2 id="题意-14"><a href="#题意-14" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个长度为10的数组cnt,cnt[i]表示数字i的个数<br>再给你两个数X，Y，你需要构造两个整数A,B<br>A有X位，B有Y位数字，数字i在A，B中出现的总次数不能超过cnt[i]<br>求AxB的最小值<br>$0&lt;=cnt[i]&lt;=20,1&lt;=X,Y&lt;=9,cnt数组的和&gt;=X+Y$</p></blockquote><h2 id="样例-12"><a href="#样例-12" class="headerlink" title="样例"></a>样例</h2><pre><code>{0,1,1,2,1,1,0,0,0,0}23Returns: 3042可选的数字为 {1,2,3,3,4,5}最优情况下A=13 B=234 {1,3,0,0,0,0,0,0,0,0}22Returns: 11A = 01  B = 11 允许前导0{0,20,20,20,20,20,20,20,20,20}99Returns: 12345678987654321{0,0,0,0,0,0,0,0,0,18}98Returns: 99999998900000001</code></pre><h1 id="srm-721-div1-T1-RememberWords"><a href="#srm-721-div1-T1-RememberWords" class="headerlink" title="srm-721-div1-T1-RememberWords"></a>srm-721-div1-T1-RememberWords</h1><h2 id="题意-15"><a href="#题意-15" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你d1,d2,w1,w2<br>能否构造出一个x[]<br>x[1]+..+x[d1] = w1, x[d1+1]+..+x[d1+d2] = w2，|x[i+1]-x[i]|&lt;=1<br>$1&lt;=d1,d2&lt;=10^9,0&lt;=w1,w2&lt;=10^9$</p></blockquote><h2 id="样例-13"><a href="#样例-13" class="headerlink" title="样例"></a>样例</h2><pre><code>23718Returns: &quot;Possible&quot;x[] = {3,4,5,6,7} 3+4 = 7, 5+6+7=181135Returns: &quot;Impossible&quot;35300500Returns: &quot;Possible&quot;1000000000100000000010000000001000000000Returns: &quot;Possible&quot;</code></pre><h1 id="srm-721-div2-T3-ApocalypseEasy"><a href="#srm-721-div2-T3-ApocalypseEasy" class="headerlink" title="srm-721-div2-T3-ApocalypseEasy"></a>srm-721-div2-T3-ApocalypseEasy</h1><h2 id="题意-16"><a href="#题意-16" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一棵n个点的无向树，有k个不同的节点上有玩具，一开始这k个点也放着炸弹<br>炸弹在T秒后就会爆炸，因此你有T次机会可以移动玩具<br>每次移动可以将某个玩具移动到相邻的点上，在T秒内允许多个玩具在同一个节点<br>但是T秒后，一个节点只能有一个玩具<br>求最终可以保护多少个玩具不被炸掉<br>$2&lt;=n&lt;=50$</p></blockquote><h2 id="样例-14"><a href="#样例-14" class="headerlink" title="样例"></a>样例</h2><pre><code>{0,1,2} p[0]=0,p[1]=1,p[2]=2   p[i]与i+1之间有一条边{2,3} 表示一开始放着炸弹与玩具的点1Returns: 1这个树就是一条链0-1-2-3 一开始2,3有玩具与炸弹，我们只能移动一次，把2的玩具移动到13的玩具会被炸毁{0,1,2}{2,3}2Returns: 2{0,0,0,1,2,3}{1,2,3}1Returns: 3{0,1,2,3,4,5,6,7,8,9}{0,1,2,3,4,5,6}50Returns: 4{0}{0,1}1</code></pre><h1 id="srm-722-div1-T1-TCPhoneHomeEasy"><a href="#srm-722-div1-T1-TCPhoneHomeEasy" class="headerlink" title="srm-722-div1-T1-TCPhoneHomeEasy"></a>srm-722-div1-T1-TCPhoneHomeEasy</h1><h2 id="题意-17"><a href="#题意-17" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个整数n表示手机号码的位数<br>再给你一些字符串表示保留的号码，比如911 110 120等<br>问你一共有多少的手机号码不以保留号码开头<br>$1&lt;=n&lt;=17,保留号码的个数&lt;=50$</p></blockquote><h2 id="样例-15"><a href="#样例-15" class="headerlink" title="样例"></a>样例</h2><pre><code>7{ &quot;0&quot;, &quot;1&quot;, &quot;911&quot; }Returns: 79900005{ &quot;0&quot;, &quot;1&quot;, &quot;911&quot; }Returns: 799006{ &quot;1&quot;, &quot;2&quot;, &quot;3&quot; }Returns: 7000006{ &quot;1&quot;, &quot;23&quot;, &quot;345&quot; }Returns: 889000</code></pre><h1 id="srm-723-div1-T1-TopXorer"><a href="#srm-723-div1-T1-TopXorer" class="headerlink" title="srm-723-div1-T1-TopXorer"></a>srm-723-div1-T1-TopXorer</h1><h2 id="题意-18"><a href="#题意-18" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个n个元素的数组x[],$0&lt;=x[i]&lt;=10^9,1&lt;=n&lt;=50$<br>你需要找到一个数组a[], 0&lt;=a[i]&lt;=x[i]<br>使得a[0]^a[1]..^a[n-1] 最大<br>输出这个最大值</p></blockquote><h2 id="样例-16"><a href="#样例-16" class="headerlink" title="样例"></a>样例</h2><pre><code>{2,2,2}Returns: 3a[]= (2, 0, 1). (2 ^ 0 ^ 1) = 3.{1,2,4,8,16}Returns: 31{1024,1024}Returns: 2047{7,4,12,33,6,8,3,1}Returns: 47{0}Returns: 0</code></pre><h1 id="srm-723-div2-T3-SimpleMazeEasy"><a href="#srm-723-div2-T3-SimpleMazeEasy" class="headerlink" title="srm-723-div2-T3-SimpleMazeEasy"></a>srm-723-div2-T3-SimpleMazeEasy</h1><pre><code> .... .   ...   ...   ..............................   ...   ...   ...</code></pre><h2 id="题意-19"><a href="#题意-19" class="headerlink" title="题意"></a>题意</h2><blockquote><p>如上第一个是一级十字迷宫，第二个是三级十字迷宫<br>一个点可以走到上下左右相邻的某一个点<br>给你一个n级十字迷宫，求所有点对之间最短路的和对 (1e9+7)取模<br>$1&lt;=n&lt;=10^{18}$</p></blockquote><h2 id="样例-17"><a href="#样例-17" class="headerlink" title="样例"></a>样例</h2><pre><code>1Returns: 163Returns: 46801000000000000Returns: 763641672</code></pre><h1 id="srm-723-div2-T2-TopXorerEasy"><a href="#srm-723-div2-T2-TopXorerEasy" class="headerlink" title="srm-723-div2-T2-TopXorerEasy"></a>srm-723-div2-T2-TopXorerEasy</h1><h2 id="题意-20"><a href="#题意-20" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你三个整数A,B,C<br>求最大的$a^b^c,(0&lt;=a&lt;=A,0&lt;=b&lt;=B,0&lt;=c&lt;=C)$<br>$0&lt;=A&lt;=10^9,0&lt;=B&lt;=10^9,0&lt;=C&lt;=10^9$</p></blockquote><h2 id="样例-18"><a href="#样例-18" class="headerlink" title="样例"></a>样例</h2><pre><code>210Returns: 3124Returns: 7345Returns: 7110010000Returns: 10101100000000010000000001000000000Returns: 1073741823000Returns: 0</code></pre><h1 id="srm-724-div1-T1-OrAndSum"><a href="#srm-724-div1-T1-OrAndSum" class="headerlink" title="srm-724-div1-T1-OrAndSum"></a>srm-724-div1-T1-OrAndSum</h1><h2 id="题意-21"><a href="#题意-21" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你两个数组X[],Y[],都包含n个元素<br>是否存在一个a数组a[0]到a[n]使得<br>$a[i]|a[i+1] = X[i], a[i]+a[i+1] = Y<a href="0&lt;=i&lt;=n-1">i</a>$<br>$1&lt;=n&lt;=50, 0&lt;=X[i],Y[i]&lt;=10^{18}$</p></blockquote><h2 id="样例-19"><a href="#样例-19" class="headerlink" title="样例"></a>样例</h2><pre><code>{7}{11}Returns: &quot;Possible&quot;a[] = {5,6}.{3,3,7,5,7}{3,5,7,9,11}Returns: &quot;Possible&quot;a[] = {1,2,3,4,5,6}.{261208776456074191,261208776456074191,261208776456074191}{333333333333333333,333333333333333333,333333333333333333}Returns: &quot;Possible&quot;</code></pre><h1 id="srm-724-div2-T3-UnfinishedTournamentEasy"><a href="#srm-724-div2-T3-UnfinishedTournamentEasy" class="headerlink" title="srm-724-div2-T3-UnfinishedTournamentEasy"></a>srm-724-div2-T3-UnfinishedTournamentEasy</h1><h2 id="题意-22"><a href="#题意-22" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个n*n的字符矩阵G表示n个人之间的胜负关系, 如果x能赢y，则G[x][y]=’W’,G[y][x]=’L’<br>如果还不知道x y之间的胜负，G[x][y]=G[y][x]=’?’<br>每个人的胜率 s[i] = 第i个人胜出的场次/(n - 1)<br>你需要补充未知的一些胜负关系使得最终胜率的方差尽可能大<br>输出最大的方差<br>方差的定义：$aver = (s[0]+s[1]+..s[n-1]) / n$<br>方差 = $( (s[0]-aver)^2+(s[1]-aver)^2+..+(s[n-1]-aver)^2 )/ n$<br>$2&lt;=n&lt;=20$<br>误差不超过1e-9</p></blockquote><h2 id="样例-20"><a href="#样例-20" class="headerlink" title="样例"></a>样例</h2><pre><code>{&quot;-??&quot;, &quot;?-?&quot;, &quot;??-&quot;}Returns: 0.16666666666666669一种方案是-WWL-WLL-胜率为 {1, 0.5, 0}. 平均值： 0.5方差：((1-0.5)^2 + (0.5-0.5)^2 + (0-0.5)^2) / 3 = 0.5 / 3 = 0.16667.{&quot;-WL&quot;, &quot;L-W&quot;, &quot;WL-&quot;}Returns: 0.0胜率为 {0.5, 0.5, 0.5} 方差为0.{&quot;-WWL&quot;, &quot;L-??&quot;, &quot;L?-?&quot;, &quot;W??-&quot;}Returns: 0.1388888888888889{&quot;-WWL&quot;, &quot;L-WW&quot;, &quot;LL-?&quot;, &quot;WL?-&quot;}Returns: 0.08333333333333331{&quot;-?&quot;, &quot;?-&quot;}Returns: 0.25</code></pre><h1 id="srm-724-div2-T2-OrAndSumEasy"><a href="#srm-724-div2-T2-OrAndSumEasy" class="headerlink" title="srm-724-div2-T2-OrAndSumEasy"></a>srm-724-div2-T2-OrAndSumEasy</h1><h2 id="题意-23"><a href="#题意-23" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你两个非负整数X,Y<br>是否存在两个整数A,B满足$A | B = X, A + B = Y$<br>$0&lt;=X,Y&lt;=10^{18}$</p></blockquote><h2 id="样例-21"><a href="#样例-21" class="headerlink" title="样例"></a>样例</h2><pre><code>711Returns: &quot;Possible&quot; A = 5 and B = 6.117Returns: &quot;Impossible&quot;1100Returns: &quot;Possible&quot;999799115789631487999999999999999999Returns: &quot;Possible&quot;A = 111111111111111111, B = 888888888888888888.</code></pre><h1 id="srm-726-div1-T1-Unpacking"><a href="#srm-726-div1-T1-Unpacking" class="headerlink" title="srm-726-div1-T1-Unpacking"></a>srm-726-div1-T1-Unpacking</h1><h2 id="题意-24"><a href="#题意-24" class="headerlink" title="题意"></a>题意</h2><blockquote><p>有n个盒子，每个盒子里外面有一张标签告诉你有a[i]个红球，b[i]个蓝球，需要c[i]的钱购买<br>现在告诉你每个盒子球的总量是符合标签的说明的,但是具体的种类可能会有如下偏差&gt;比如可能有a[i]+1 b[i]-1 a[i] b[i]  a[i]-1 b[i]+1三种可能<br>现在问你最少花多少钱买盒子能够使得至少会有K个球是同色的<br>$1&lt;=n&lt;=50, 1&lt;=a[i],b[i],c[i]&lt;=10000$</p></blockquote><pre><code>{6,5}{4,4}{1,1}10Returns: 2{5,5}{4,4}{1,1}10Returns: -1{10}{5}{13}9Returns: 13{1,2,3,4,5}{1,2,3,4,5}{1,2,3,4,5}10Returns: 10</code></pre><h1 id="srm-726-div2-T3-HeroicScheduled2"><a href="#srm-726-div2-T3-HeroicScheduled2" class="headerlink" title="srm-726-div2-T3-HeroicScheduled2"></a>srm-726-div2-T3-HeroicScheduled2</h1><h2 id="题意-25"><a href="#题意-25" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你n个任务的开始时间start[]与结束时间finish[]<br>每天你可以选择一个任务完成,求有多少种任务的集合是可完成的<br>$1&lt;=n&lt;=50, 0&lt;=start[i]&lt;=finish[i]&lt;=15$</p></blockquote><h2 id="样例-22"><a href="#样例-22" class="headerlink" title="样例"></a>样例</h2><pre><code>{0,0,0}{0,0,0}Returns: 4{14,14,14}{15,15,15}Returns: 7注：三个任务不能完成，其他所有组合都可以完成</code></pre><h1 id="srm-726-div2-T2-TurtleGame"><a href="#srm-726-div2-T2-TurtleGame" class="headerlink" title="srm-726-div2-T2-TurtleGame"></a>srm-726-div2-T2-TurtleGame</h1><h2 id="题意-26"><a href="#题意-26" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个网格，有些点被#覆盖了，现在hexo和jack轮流开始将空地变成#<br>如果当前轮到的人操作之后左上角到右下角不存在通路了，当前操作的人就输了<br>通路只能是从左上角到右下角往右或者往下走的路径<br>问你hexo是否存在必胜策略</p></blockquote><h2 id="样例-23"><a href="#样例-23" class="headerlink" title="样例"></a>样例</h2><pre><code>{&quot;..&quot;, &quot;..&quot;}Returns: &quot;Win&quot;{&quot;...&quot;, &quot;.#.&quot;, &quot;.#.&quot;, &quot;...&quot;}Returns: &quot;Lose&quot;</code></pre><h1 id="srm-727-div1-T1-OnlySanta"><a href="#srm-727-div1-T1-OnlySanta" class="headerlink" title="srm-727-div1-T1-OnlySanta"></a>srm-727-div1-T1-OnlySanta</h1><h2 id="题意-27"><a href="#题意-27" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个字符串S,一开始不包含”SATAN”,长度小于1000<br>你可以在任意位置插入若干个字符使得<br>S包含”SANTA”但是不包含”SATAN”,不需要最小化插入字符的个数<br>随便输出一个解即可</p></blockquote><h2 id="样例-24"><a href="#样例-24" class="headerlink" title="样例"></a>样例</h2><pre><code>&quot;STANA&quot;Returns: &quot;STANTA&quot;&quot;STN&quot;Returns: &quot;SANTNA&quot;&quot;SXAYNTA&quot;Returns: &quot;OOOOSOXAYNTOOOOAOOO&quot;</code></pre><h1 id="srm-727-div2-T3-ManageSubsequences"><a href="#srm-727-div2-T3-ManageSubsequences" class="headerlink" title="srm-727-div2-T3-ManageSubsequences"></a>srm-727-div2-T3-ManageSubsequences</h1><h2 id="题意-28"><a href="#题意-28" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你三个字符串S,A,B<br>求在S中插入最少多少个字符可以使得S包含A，不包含B<br>如果不能达成，返回-1<br>$字符串长度&lt;=300$</p></blockquote><h2 id="样例-25"><a href="#样例-25" class="headerlink" title="样例"></a>样例</h2><pre><code>&quot;ABXBCA&quot;&quot;ABCD&quot;&quot;XD&quot;Returns: 2</code></pre><h1 id="srm-727-div2-T2-Twodiagonals"><a href="#srm-727-div2-T2-Twodiagonals" class="headerlink" title="srm-727-div2-T2-Twodiagonals"></a>srm-727-div2-T2-Twodiagonals</h1><h2 id="题意-29"><a href="#题意-29" class="headerlink" title="题意"></a>题意</h2><blockquote><p>平面上有n个点,现在你需要建造两条路，一条是斜率为1,<br>另一条斜率为-1<br>你的任务是让这两条路经过尽可能多的点<br>求最多经过几个点<br>$1&lt;=N&lt;=1000,0&lt;=x[i],y[i]&lt;=999$</p></blockquote><h2 id="样例-26"><a href="#样例-26" class="headerlink" title="样例"></a>样例</h2><pre><code>{1, 4, 4, 5}{3, 0, 2, 3}Returns: 4(1,3) (4,0) (4,2) (5,3)四个点都可以被经过</code></pre><h1 id="srm-728-div1-T1-Halving"><a href="#srm-728-div1-T1-Halving" class="headerlink" title="srm-728-div1-T1-Halving"></a>srm-728-div1-T1-Halving</h1><h2 id="题意-30"><a href="#题意-30" class="headerlink" title="题意"></a>题意</h2><blockquote><p>你有一些木棍，现在你想让这些木棍都变成同样的长度<br>你可以进行如下的操作<br>选择一根长度为L&gt;=2的木棍<br>如果L为偶数，将木棍一分为2，变成两根L/2的木棍<br>否则，分成一根为(L+1) / 2, 另一根为(L-1) / 2;<br>在分成的两根中选择其中一根，扔掉另外一根<br>可以证明的是任何集合的木棍都能最终变成一样长度的木棍<br>现在问你最少需要几步可以完成任务<br>$2&lt;=n&lt;=50, 1&lt;=a_i&lt;=10^9$</p></blockquote><h2 id="样例-27"><a href="#样例-27" class="headerlink" title="样例"></a>样例</h2><pre><code>{11, 4}Returns: 3最优方案是选择长度为 11的木棍, 分成 5 and 6 ,保留5选择长度为4的木棍,分成两个长度为2的，保留一个2选择长度为5的, 分成2和3，保留2现在得到了 两个2{1, 2, 3, 4, 5, 6, 7}Returns: 10</code></pre><h1 id="srm-728-div2-T3-IncreasingSequencesEasy"><a href="#srm-728-div2-T3-IncreasingSequencesEasy" class="headerlink" title="srm-728-div2-T3-IncreasingSequencesEasy"></a>srm-728-div2-T3-IncreasingSequencesEasy</h1><h2 id="题意-31"><a href="#题意-31" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个有向图，每个点都只有一个出度<br>问你存在多少的有向图，可以从原图中选择一个三元组$a,b,c$，重标号成$b,c,a$之后得到<br>$1&lt;=n&lt;=10$</p></blockquote><h2 id="样例-28"><a href="#样例-28" class="headerlink" title="样例"></a>样例</h2><pre><code>{2, 2, 0}//表示0-&gt;2,1-&gt;2,2-&gt;0这个有向图Returns: 20 1 2 -&gt; 1 2 0 1 2 0 -&gt; 2 0 1可以得到两个 {1, 2, 1} 与 {1, 0, 0}两个新图{0, 1, 2, 3}Returns: 0每个点都是自环，不管怎么改变标号，图还是原图{4, 5, 3, 1, 1, 5}Returns: 179</code></pre><h1 id="srm-728-div2-T2-IncreasingSequencesEasy"><a href="#srm-728-div2-T2-IncreasingSequencesEasy" class="headerlink" title="srm-728-div2-T2-IncreasingSequencesEasy"></a>srm-728-div2-T2-IncreasingSequencesEasy</h1><h2 id="题意-32"><a href="#题意-32" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你两个长度为n的数组L[],R[]<br>求满足<code>L[i]&lt;=A[i]&lt;=R[i]</code>而且<code>A[0]&lt;A[1]&lt;...&lt;A[n-1]</code>的序列的数量<br>答案对998244353取模<br>$1&lt;=n&lt;=300,1&lt;=L[i]&lt;=10^4,L[i]&lt;=R[i]&lt;=10^4$</p></blockquote><h2 id="样例-29"><a href="#样例-29" class="headerlink" title="样例"></a>样例</h2><pre><code>{1, 3, 1, 4}{6, 5, 4, 6}Returns: 4There are 4 strictly increasing sequences satisfying the conditions: {1, 3, 4, 5}, {1, 3, 4, 6}, {2, 3, 4, 5} and {2, 3, 4, 6}.1){10, 20}{20, 30}Returns: 120</code></pre><h1 id="srm-729-div2-T2-SoManyRectangles"><a href="#srm-729-div2-T2-SoManyRectangles" class="headerlink" title="srm-729-div2-T2-SoManyRectangles"></a>srm-729-div2-T2-SoManyRectangles</h1><h2 id="题意-33"><a href="#题意-33" class="headerlink" title="题意"></a>题意</h2><blockquote><p>有n个矩形，问你最大重叠的次数<br>边或者点的重叠不算<br>$1&lt;=n&lt;=50$</p></blockquote><h2 id="样例-30"><a href="#样例-30" class="headerlink" title="样例"></a>样例</h2><pre><code>{0, 0, 0, 0, 0} // x1[]{0, 0, 0, 0, 0} // y1[]{1, 1, 1, 1, 1} // x2[]{1, 1, 1, 1, 1} // y2[](x1[i], y1[i])  (x2[i], y2[i]) 表示一个矩形的左下角和右上角Returns: 5</code></pre><h1 id="srm-729-div2-T3-RareItems"><a href="#srm-729-div2-T3-RareItems" class="headerlink" title="srm-729-div2-T3-RareItems"></a>srm-729-div2-T3-RareItems</h1><h2 id="题意-34"><a href="#题意-34" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个数组表示每种物品的出现个数<br>现在根据每种物品的比例随机购买每种物品<br>期望购买几次能将每种物品都买到手<br>$1&lt;=n&lt;=20$</p></blockquote><h2 id="样例-31"><a href="#样例-31" class="headerlink" title="样例"></a>样例</h2><pre><code>{2,2}Returns: 3.0</code></pre><h1 id="srm-729-div1-T1-MagicNumberThree"><a href="#srm-729-div1-T1-MagicNumberThree" class="headerlink" title="srm-729-div1-T1-MagicNumberThree"></a>srm-729-div1-T1-MagicNumberThree</h1><h2 id="题意-35"><a href="#题意-35" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个长度为50的数字串，问你有多少个子序列构成的数字可以被3整除<br>答案对1e9+7取模</p></blockquote><h2 id="样例-32"><a href="#样例-32" class="headerlink" title="样例"></a>样例</h2><pre><code>&quot;132&quot;Returns: 3&quot;00&quot;Returns: 3</code></pre><h1 id="srm-730-div2-T2-ExpectedMinimumPowerDiv2"><a href="#srm-730-div2-T2-ExpectedMinimumPowerDiv2" class="headerlink" title="srm-730-div2-T2-ExpectedMinimumPowerDiv2"></a>srm-730-div2-T2-ExpectedMinimumPowerDiv2</h1><h2 id="题意-36"><a href="#题意-36" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你两个整数$n,x$, $1&lt;=n&lt;=50$<br>假如要选择x个整数，每个整数都在1-n之间，<br>现在在所有的这些选择中，我们选取x个数都不同的选择<br>假设选择中最小的数为$S$,求$2^S$的期望<br>也就是说每一种x个数不同的选择都会有一个$S_i$,求<br>$2^{S_i}$的平均值，也就是期望</p></blockquote><h2 id="样例-33"><a href="#样例-33" class="headerlink" title="样例"></a>样例</h2><pre><code>44Returns: 2.0只能选择1 2 3 4最小的数是1，所以答案是2^1=2{1,2,3,4}其实有4!的排列，但是我们要算的是平均值，乘以排列数再除以排列数就相互抵消了32Returns: 2.6666666666666665有三种选择 {1,2} or {1,3} or {2,3}. S值分别为1 1 22^S的期望为 (2^1 + 2^1 + 2^2) / 3 = 8 / 3 = 2.6666666</code></pre><h1 id="srm-730-div2-T3-StonesOnATreeDiv2"><a href="#srm-730-div2-T3-StonesOnATreeDiv2" class="headerlink" title="srm-730-div2-T3-StonesOnATreeDiv2"></a>srm-730-div2-T3-StonesOnATreeDiv2</h1><h2 id="题意-37"><a href="#题意-37" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一棵树，每个点有点权<br>现在你可以在一些点上放石头，也可以拿掉某些点上的石头<br>一个点可以放石头当且仅当这个点的所有儿子都放上了石头<br>根节点放上石头任务完成<br>求在整个过程中放着石头的节点的点权之和的最大值的最小值<br>n&lt;=1000</p></blockquote><h2 id="样例-34"><a href="#样例-34" class="headerlink" title="样例"></a>样例</h2><pre><code>{0,1,2,3} //分别表示1的父亲 2的父亲 3的父亲 4的父亲{1,2,2,4,4}//每个点的点权值Returns: 8五个节点构成了一条链在节点4上放一个石头 (权值和 = 4).在节点3上放一个石头 (权值和 = 8).移除节点4上的石头   (权值和 = 4).在节点2上放一个石头 (权值和 = 6).在节点1上放一个石头 (权值和 = 8).移除节点2上的石头   (权值和 = 6)在节点0(根节点)上放一个石头 (权值和 = 7)整个过程中最大的权值和为8，不存在比最大值比8小的方案了</code></pre><h1 id="srm-731-div2-T3-JustBrackets"><a href="#srm-731-div2-T3-JustBrackets" class="headerlink" title="srm-731-div2-T3-JustBrackets"></a>srm-731-div2-T3-JustBrackets</h1><h2 id="题意-38"><a href="#题意-38" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个合法的括号序列，每次你可以删除一个”()”<br>你可以删除0个或者多个”()”<br>求操作之后字典序最小的序列<br>字符串长度&lt;=100</p></blockquote><h2 id="样例-35"><a href="#样例-35" class="headerlink" title="样例"></a>样例</h2><pre><code>&quot;()&quot;Returns: &quot;()&quot;解释:要保证非空&quot;()()&quot;Returns: &quot;()&quot;&quot;(())&quot;Returns: &quot;(())&quot;&quot;(()(()))&quot;Returns: &quot;((()))&quot;</code></pre><h1 id="srm-731-div1-T1-TreesAndBractkets"><a href="#srm-731-div1-T1-TreesAndBractkets" class="headerlink" title="srm-731-div1-T1-TreesAndBractkets"></a>srm-731-div1-T1-TreesAndBractkets</h1><h2 id="题意-39"><a href="#题意-39" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个合法的括号序列s1，每次你可以删除一个”()”<br>你可以删除0个或者多个”()”<br>求能否删成另一个括号序列s2</p></blockquote><h2 id="样例-36"><a href="#样例-36" class="headerlink" title="样例"></a>样例</h2><pre><code>&quot;()&quot;&quot;()&quot;Returns: &quot;Possible&quot;&quot;(()()())&quot;&quot;((()))&quot;Returns: &quot;Impossible&quot;&quot;((())((())())())&quot;&quot;(()(())())&quot;Returns: &quot;Possible&quot;</code></pre><h1 id="srm-733-div2-T2-BuildingSpanningTreesDiv2"><a href="#srm-733-div2-T2-BuildingSpanningTreesDiv2" class="headerlink" title="srm-733-div2-T2-BuildingSpanningTreesDiv2"></a>srm-733-div2-T2-BuildingSpanningTreesDiv2</h1><h2 id="题意-40"><a href="#题意-40" class="headerlink" title="题意"></a>题意</h2><blockquote><p>有一副n个点的完全图G（每两个点之间都有边，一共有 n*(n-1)/2条边)<br>告诉你一个边的集合E,里面有n-3条边<br>G的生成树是选取G里面的n-1条边连接G中所有的点<br>请问有多少的生成树会包括E，返回答案对987654323取模<br>$4 &lt;= n &lt;= 1000$<br>假设$x[i]-&gt;y[i]$表示E里面的一条边<br>$x[i] &lt; y[i]$ </p></blockquote><h2 id="样例-37"><a href="#样例-37" class="headerlink" title="样例"></a>样例</h2><pre><code>n=4x={1}x={2}Returns: 8解释8个生成树如下会包括边(1, 2):{(1, 2), (1, 3), (1, 4)}{(1, 2), (1, 3), (2, 4)}{(1, 2), (1, 3), (3, 4)}{(1, 2), (2, 3), (2, 4)}{(1, 2), (1, 4), (2, 3)}{(1, 2), (1, 4), (3, 4)}{(1, 2), (2, 3), (3, 4)}{(1, 2), (2, 4), (3, 4)}n=6x={1,1,2}y={2,3,3}Returns: 0解释n-3条边之间形成了环，无解5{1,2}{4,5}Returns: 20</code></pre><h1 id="srm-733-div2-T3-HamiltonianPathsInGraph"><a href="#srm-733-div2-T3-HamiltonianPathsInGraph" class="headerlink" title="srm-733-div2-T3-HamiltonianPathsInGraph"></a>srm-733-div2-T3-HamiltonianPathsInGraph</h1><h2 id="题意-41"><a href="#题意-41" class="headerlink" title="题意"></a>题意</h2><blockquote><p>有一个有向图,恰好有n*(n-1)/2条边，对于每一个(i，j)要么有一条<br>i-&gt;j的边，要么有一条j-&gt;i的边,但不会同时存在这两条边<br>给你这个图的邻接矩阵a，a[i][j]=’+’表示i-&gt;j有边，’-‘表示没有<br>a[i][i]=’.’表示这个图没有自环<br>图的汉密尔顿路径是长度为n包含每个点恰好一次的路径<br>实际上对于上面这种特性的图，一定存在至少一条汉密尔顿路径<br>输出任意一条汉密尔顿路径</p></blockquote><h2 id="样例-38"><a href="#样例-38" class="headerlink" title="样例"></a>样例</h2><pre><code>{&quot;.+&quot;, &quot;-.&quot;}Returns: {0, 1 }有唯一一条汉密尔顿路径0-&gt;1{&quot;.--+&quot;, &quot;+.+-&quot;, &quot;+-.-&quot;, &quot;-++.&quot;}Returns: {3, 1, 2, 0 }下面都是答案{0, 3, 1, 2}{1, 0, 3, 2}{1, 2, 0, 3}{2, 0, 3, 1}{3, 1, 2, 0}</code></pre><h1 id="srm-734-div2-T2-TheSquarecityDiv2"><a href="#srm-734-div2-T2-TheSquarecityDiv2" class="headerlink" title="srm-734-div2-T2-TheSquarecityDiv2"></a>srm-734-div2-T2-TheSquarecityDiv2</h1><h2 id="题意-42"><a href="#题意-42" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个n*n的数字网格,每个格子表示一个房间,每个格子里面的数字表示房间的温度<br>每个房间的温度都是不同的<br>每个房间一开始都有一个人<br>从(x1,y1)移动到(x2,y2)需要花费|x1-x2|+|y1-y2|的时间<br>一个人每次移动的时间不得超过r<br>现在所有人都开始重复如下操作:<br>每个人都去寻找最近的比自己房间温度高的房间,直到距离r以内不存在温度更高的房间为止<br>求最终有多少个房间里面有人 以及 人数最多的房间有多少人<br>$1&lt;=n&lt;=20$</p></blockquote><h2 id="样例-39"><a href="#样例-39" class="headerlink" title="样例"></a>样例</h2><pre><code>r = 1{    9, 1, 6,     5, 3, 2,     7, 4, 8}ans = {4, 4}温度为1与5的房间的人都走到了温度9的房间3先走到5再走到92和4房间的最终都会到8...</code></pre><h1 id="srm-734-div2-T3-TheRectangularCityDiv2"><a href="#srm-734-div2-T3-TheRectangularCityDiv2" class="headerlink" title="srm-734-div2-T3-TheRectangularCityDiv2"></a>srm-734-div2-T3-TheRectangularCityDiv2</h1><h2 id="题意-43"><a href="#题意-43" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个n*m的网格，里面有空地和障碍,<br>请问有多少种走法可以从边界的某个空地出发走遍每一个空地恰好一次，<br>最后从某个边界的空地走出去<br>$n\times m&lt;=20$</p></blockquote><h2 id="样例-40"><a href="#样例-40" class="headerlink" title="样例"></a>样例</h2><pre><code>{    &quot;....&quot;,     &quot;.##.&quot;,     &quot;....&quot;}Returns: 20{    &quot;....&quot;,     &quot;.###&quot;,     &quot;....&quot;}Returns: 2{    &quot;....&quot;,     &quot;####&quot;,     &quot;....&quot;}Returns: 0</code></pre><h1 id="srm-734-div1-T1-TheRoundCityDiv1"><a href="#srm-734-div1-T1-TheRoundCityDiv1" class="headerlink" title="srm-734-div1-T1-TheRoundCityDiv1"></a>srm-734-div1-T1-TheRoundCityDiv1</h1><h2 id="题意-44"><a href="#题意-44" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个半径为r，圆心在0 0位置的圆<br>求从圆心处能看到多少个圆内的整点<br>比如0 0 可以看到1 1，但是看不到2 2，因为2 2被1 1 挡住了<br>$ 1 &lt;= r &lt;= 1e6 $</p></blockquote><h2 id="样例-41"><a href="#样例-41" class="headerlink" title="样例"></a>样例</h2><pre><code>2Returns: 8一共有12个点: (0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1), (0, 2), (0, -2), (2, 0), (-2, 0),  最后四个点看不到</code></pre><h1 id="srm-735-div2-T2-TeleportationMaze"><a href="#srm-735-div2-T2-TeleportationMaze" class="headerlink" title="srm-735-div2-T2-TeleportationMaze"></a>srm-735-div2-T2-TeleportationMaze</h1><h2 id="题意-45"><a href="#题意-45" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个网格迷宫，求从起点走到终点的最短路<br>有两种走法</p><ul><li>走到上下左右某个相邻的空地，代价是1</li><li>飞到上下左右离子集最近的空地，代价是2，可以跨越障碍<br>网格大小&lt;=50</li></ul></blockquote><h2 id="样例-42"><a href="#样例-42" class="headerlink" title="样例"></a>样例</h2><pre><code>0 0 -&gt; 3 3 .##..###.###....answer: 4从0 0直接飞到0 3,再从0 3直接飞到3 30 1 -&gt; 1 0#..#answer:-1 （无解）0 0 -&gt; 6 1......#####.#.###.#####.#.###.#####.#.....answer: 5</code></pre><h1 id="srm-735-div2-T3-MajoritySubarray"><a href="#srm-735-div2-T3-MajoritySubarray" class="headerlink" title="srm-735-div2-T3-MajoritySubarray"></a>srm-735-div2-T3-MajoritySubarray</h1><h2 id="题意-46"><a href="#题意-46" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你一个数组，长度为100000, 每个元素都在0-49之间<br>求多少子区间存在一个众数的数量大于区间长度的一半<br>众数：出现最多的数</p></blockquote><h2 id="样例-43"><a href="#样例-43" class="headerlink" title="样例"></a>样例</h2><pre><code>0 0 1 2 0answer： 8一共是如下8个子区间{0} {0} {1} {2} {0}{0,0}:0的出现次数超过一半 {0,0,1}：0的出现次数超过一半{0,0,1,2,0}</code></pre><h1 id="736-div2-T2-Reroll"><a href="#736-div2-T2-Reroll" class="headerlink" title="736-div2-T2-Reroll"></a>736-div2-T2-Reroll</h1><h2 id="题意-47"><a href="#题意-47" class="headerlink" title="题意"></a>题意</h2><blockquote><p>给你n个数,表示n个骰子向上的面的数字<br>再给你一个数target(n&lt;=target&lt;=6*n)<br>你可以选取这n个骰子中的若干个骰子重新扔<br>最少需要选择几个骰子重新扔能使得所有朝上的数的和为target<br>$1&lt;=n&lt;=20$</p></blockquote><h2 id="样例-44"><a href="#样例-44" class="headerlink" title="样例"></a>样例</h2><pre><code>42 {1,3,5,3,6,4,2}answer: 610{4,2,4,5}answer: 2</code></pre><h1 id="736-div2-T3-MazeWithKeys"><a href="#736-div2-T3-MazeWithKeys" class="headerlink" title="736-div2-T3-MazeWithKeys"></a>736-div2-T3-MazeWithKeys</h1><h2 id="题意-48"><a href="#题意-48" class="headerlink" title="题意"></a>题意</h2><blockquote><p>你正在设计一个网格地图游戏，网格满足如下条件<br>1：恰好有一个出口<br>2：可能有一些门，门的标号为大写字母A-Z，每种门最多只有一个<br>3：可能有一些钥匙，钥匙的标号为小写字母a-z，每种钥匙只能打开对应的大写字母的门<br>4：可能有一些空地，空地的标号为小数点<br>5：可能有一些障碍，障碍不能经过<br>对于一个地图，你想要知道有多少的空地可以到达出口，为了使游戏显得不那么简单，你想要知道到达出口至少开一扇门的的空地有多少个<br>n,m&lt;=50<br>‘.’ 代表空地<br>‘#’ 代表障碍<br>‘*’代表出口</p></blockquote><h2 id="样例-45"><a href="#样例-45" class="headerlink" title="样例"></a>样例</h2><pre><code>6 7...#.A..#B#.#..#.#.#..#.#.#..#b#.#.a#...#*输出:103 5 a#a#*#..#.a..A.输出:4</code></pre>]]></content>
      
      <categories>
          
          <category> topcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> noip </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我从哪里来</title>
      <link href="/2018/08/25/hexo-github/"/>
      <url>/2018/08/25/hexo-github/</url>
      <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><ul><li><a href="https://gitforwindows.org/" target="_blank" rel="noopener">git bash下载</a></li><li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs下载</a></li><li>打开git bash，输入npm -v 检测是否安装成功</li><li>安装hexo: npm i -g hexo</li></ul></blockquote><h1 id="github-相关"><a href="#github-相关" class="headerlink" title="github 相关"></a>github 相关</h1><p>注册github账号,注意验证好邮箱<br>假设账号名字为yourname<br>在你的github中新建一个仓库,名字为 yourname.github.io</p><p>打开gitbash</p><pre><code>git config --global user.name &quot;账户名&quot;git config --global user.email &quot;github验证的邮箱名&quot;ssh-keygen -t rsa -C &quot;github验证的邮箱名&quot; (默认按回车即可)</code></pre><p>将~/.ssh/id_rsa.pub中的内容复制到github网页端-&gt;settings-&gt;SSH and GPG keys-&gt;New SSH key<br>完成后在bash中输入</p><pre><code>ssh -T git@github.com输入yes即可</code></pre><p>设置成功返回</p><pre><code>Hi xxxxxxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><h1 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h1><pre><code>hexo init myblogcd mybloghexo s</code></pre><p>打开<a href="http://127.0.0.1:4000/" target="_blank" rel="noopener">http://127.0.0.1:4000/</a> 检验是否初始化成功</p><h1 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h1><p>在themes文件夹里面放上主题文件,比如3-hexo主题</p><pre><code>git clone https://github.com/xjoi/hexo-theme-3-hexo themes/3-hexo</code></pre><p>修改 myblog/_config.yml文件,将theme后面的landscape改为3-hexo,更多主题参考<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo官网</a></p><pre><code>hexo g &amp;&amp; hexo s</code></pre><p>输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>, 查看主题是否加载成功</p><h1 id="将博客部署到github上"><a href="#将博客部署到github上" class="headerlink" title="将博客部署到github上"></a>将博客部署到github上</h1><p>在myblog目录下安装hexo-deployer-git</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>修改myblog/_config.yml最后几行,注意空格要严格一样</p><pre><code>deploy:  type: git  repo: https://github.com/yourname/yourname.github.io.git  branch: master</code></pre><p>部署</p><pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><p>稍等一会儿在浏览器中输入yourname.github.io查看是否发布成功</p><h1 id="设置博客模板"><a href="#设置博客模板" class="headerlink" title="设置博客模板"></a>设置博客模板</h1><p>修改 scaffolds下的post.md</p><pre><code>---title: {{ title }}date: {{ date }}categories:tags:---</code></pre><h1 id="发表博客"><a href="#发表博客" class="headerlink" title="发表博客"></a>发表博客</h1><pre><code>hexo new post xxx</code></pre><p>会自动生成一个以xxx为title的markdown文件,编辑这个文件即可</p><h1 id="网站的备份"><a href="#网站的备份" class="headerlink" title="网站的备份"></a>网站的备份</h1><p>发布到github上面的内容是不带原有的markdown文件的,发布的是解析后的html文件</p><p>因此为了满足异地的写作与发布,我们应该要将本地的内容以及相关的配置备份一下</p><p><a href="https://lrscy.github.io/2018/01/26/Hexo-Github-Backup/" target="_blank" rel="noopener">备份</a></p><pre><code>git clone https://github.com/yourgithubname/yourgithubname.github.comcd yourgithubnamenpm install hexo-clinpm installnpm install hexo-deployer-git</code></pre><h1 id="网站信息修改"><a href="#网站信息修改" class="headerlink" title="网站信息修改"></a>网站信息修改</h1><p>编辑myblog/_config.yml文件</p><pre><code>title: 网站名字author: 作者url: 网站网址</code></pre><h1 id="文末声明"><a href="#文末声明" class="headerlink" title="文末声明"></a>文末声明</h1><p>编辑<code>3-hexo/_config.yml</code>文件,找到文末声明的地方,修改自己的邮箱</p><h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1><p>编辑 <code>node_modules\marked\lib\marked.js</code> 脚本<br>处理markdown与mathjax的冲突<br>如果要显示数学公式,可以在最开头加上mathjax: true</p><pre><code>451行左右(随着版本的更新可能有波动)escape: /^\\([\\`*{}\[\]()# +\-.!_&gt;])/,改为escape: /^\\([`*\[\]()# +\-.!_&gt;])/,459行左右em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,改为em:/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</code></pre><h1 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h1><p>首先关闭myblog/_config.yml中的高亮设置</p><pre><code>highlight:  enable: false</code></pre><p>配置3-hexo/_config.yml中的高亮设置：</p><pre><code>highlight:  on: true # true开启代码高亮  lineNum: true # true显示行号  theme: atom-dark</code></pre><h1 id="头像与文章列表背景"><a href="#头像与文章列表背景" class="headerlink" title="头像与文章列表背景"></a>头像与文章列表背景</h1><blockquote><p>替换themes/3-hexo/source/img 下面的avatar.jpg (头像)<br>替换themes/3-hexo/source/img 下面的background.jpg(文章列表背景图片)</p></blockquote><h1 id="友链与评论"><a href="#友链与评论" class="headerlink" title="友链与评论"></a>友链与评论</h1><p>编辑themes/3-hexo/_config.yml文件</p><blockquote><p>链接图标link: 修改github地址<br>友情链接friends: 增加自己朋友的blog地址<br>评论: comment : 开启设置为true, 选择gitalk ,在下方gitalk下面填入相应信息</p><pre><code>注册: https://github.com/settings/applications/new</code></pre></blockquote><p><img src="/img/auth.png" alt="image"></p><p>编辑3-hexo/_config.yml</p><pre><code>gitalk:  githubID: xjoi #git账户名  repo: xjoi.github.io #仓库名  ClientID: af0e91f8b3e07b208cc7 #上一步得到的信息  ClientSecret: 20b655d18155c0ee2c3093b8be4b91f15d444c3b  adminUser: becauseofyou # 仓库管理员账号名</code></pre><h1 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h1><p>找到3-hexo/_config.yml 中searchAll: 有提示</p><pre><code>searchAll: true# true 启用全文搜索# 开启此功能需要下面操作：# 1. 在 hexo 根目录 执行 npm install hexo-generator-search --save 安装插件# 2. 在 hexo 根目录的 _config.xml 中添加下面内容# search:#   path: search.xml#   field: post</code></pre><h1 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h1><p>同上</p><pre><code>word_count: true# true 开启字数统计# 开启此功能需要安装插件 ：在 hexo根目录 执行npm i hexo-wordcount --save</code></pre><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>图片放在public/img目录下面，引用的时候只需要</p><pre><code>![name](/img/test.png)</code></pre>]]></content>
      
      <categories>
          
          <category> 工具们 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站搭建 </tag>
            
        </tags>
      
    </entry>
    
  
  
    
  
</search>
